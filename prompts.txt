I have added an option flag to @indexer-config.yaml . If 'lucidlink_filespace: true', then the module uses a special method for indexing the root_path that uses REST API calls. 
These API calls use the 'filespace_port:' number from @indexer-config.yaml . This lucidlink method will use a custom database schema that matches the keys of the JSON response from the API. 

1. Initial API call: http://127.0.0.1:$filespace_port/files
This API returns JSON in the format of @API_top_level.json that is a list of every top level directory in the volume.
As you can see the 'creationTime' and 'updateTime' keys use nanosecond Unix epoch time format. 
This will need to be converted to standard datetime timestamps before writing to database.
2. For each top level directory returned by this initial API call, the filesystem tree can be recursively traversed using a second API method.
Each directory entry can be queried with this API call:
http://127.0.0.1:9778/files/<directory>
where <directory> is the url encoded directory name.
3. This second API call returns the contents of the directory as JSON items, of "type" "file" or "directory".
4. Using these methods the entire filesystem tree can be indexed using API calls instead of a recursive directory traversal.